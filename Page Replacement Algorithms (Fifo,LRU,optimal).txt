Page Replacement Algorithms
FIFO (First-In First-Out)
LRU (Least Recently Used)
Optimal Page Replacement


1. FIFO Page Replacement Algorithm
#include <stdio.h>

void FIFO(int pages[], int n, int capacity) {
    int frame[10], front = 0, rear = 0, count = 0, faults = 0, i, j, flag;

    printf("\nFIFO Page Replacement:\n");

    for (i = 0; i < n; i++) {
        flag = 0;

        for (j = 0; j < count; j++) {
            if (frame[j] == pages[i]) {
                flag = 1;
                break;
            }
        }

        if (!flag) {
            if (count < capacity) {
                frame[count++] = pages[i];
            } else {
                frame[front] = pages[i];
                front = (front + 1) % capacity;
            }
            faults++;
        }

        printf("Frame: ");
        for (j = 0; j < count; j++) {
            printf("%d ", frame[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", faults);
}



2. LRU Page Replacement Algorithm
int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;

    for (i = 1; i < n; ++i) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }
    return pos;
}

void LRU(int pages[], int n, int capacity) {
    int frame[10], time[10], count = 0, faults = 0, i, j, flag;

    printf("\nLRU Page Replacement:\n");

    for (i = 0; i < n; i++) {
        flag = 0;

        for (j = 0; j < count; j++) {
            if (frame[j] == pages[i]) {
                flag = 1;
                time[j] = i;
                break;
            }
        }

        if (!flag) {
            if (count < capacity) {
                frame[count] = pages[i];
                time[count] = i;
                count++;
            } else {
                int pos = findLRU(time, count);
                frame[pos] = pages[i];
                time[pos] = i;
            }
            faults++;
        }

        printf("Frame: ");
        for (j = 0; j < count; j++) {
            printf("%d ", frame[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", faults);
}




3. Optimal Page Replacement Algorithm

int predict(int pages[], int frame[], int n, int index, int capacity) {
    int i, j, farthest = index, pos = -1;

    for (i = 0; i < capacity; i++) {
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    pos = i;
                }
                break;
            }
        }

        if (j == n)
            return i;
    }

    return (pos == -1) ? 0 : pos;
}

void Optimal(int pages[], int n, int capacity) {
    int frame[10], count = 0, faults = 0, i, j, flag;

    printf("\nOptimal Page Replacement:\n");

    for (i = 0; i < n; i++) {
        flag = 0;

        for (j = 0; j < count; j++) {
            if (frame[j] == pages[i]) {
                flag = 1;
                break;
            }
        }

        if (!flag) {
            if (count < capacity) {
                frame[count++] = pages[i];
            } else {
                int pos = predict(pages, frame, n, i + 1, capacity);
                frame[pos] = pages[i];
            }
            faults++;
        }

        printf("Frame: ");
        for (j = 0; j < count; j++) {
            printf("%d ", frame[j]);
        }
        printf("\n");
    }

    printf("Total Page Faults: %d\n", faults);
}



Main Function to Run All Three


int main() {
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3};
    int n = sizeof(pages) / sizeof(pages[0]);
    int capacity = 3;

    FIFO(pages, n, capacity);
    LRU(pages, n, capacity);
    Optimal(pages, n, capacity);

    return 0;
}





gcc page_replacement.c -o page_replacement
./page_replacement
_