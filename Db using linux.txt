Implement file handling operations using Linux system calls.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

#define FILENAME "students.txt"

typedef struct {
    int roll;
    char name[50];
    float marks;
} Student;

void createFile() {
    int fd = open(FILENAME, O_CREAT | O_WRONLY | O_TRUNC, 0644);
    if (fd < 0) {
        perror("File creation failed");
    } else {
        printf("File created successfully.\n");
        close(fd);
    }
}

void insertRecord() {
    Student s;
    int fd = open(FILENAME, O_WRONLY | O_APPEND);
    if (fd < 0) {
        perror("Open failed");
        return;
    }

    printf("Enter Roll No: ");
    scanf("%d", &s.roll);
    printf("Enter Name: ");
    scanf("%s", s.name);
    printf("Enter Marks: ");
    scanf("%f", &s.marks);

    write(fd, &s, sizeof(Student));
    printf("Record inserted.\n");
    close(fd);
}

void viewRecords() {
    Student s;
    int fd = open(FILENAME, O_RDONLY);
    if (fd < 0) {
        perror("Open failed");
        return;
    }

    printf("\n%-10s %-20s %-10s\n", "Roll", "Name", "Marks");
    printf("------------------------------------------\n");

    while (read(fd, &s, sizeof(Student)) > 0) {
        printf("%-10d %-20s %-10.2f\n", s.roll, s.name, s.marks);
    }

    close(fd);
}

void searchRecord() {
    Student s;
    int roll, found = 0;
    printf("Enter Roll No to search: ");
    scanf("%d", &roll);

    int fd = open(FILENAME, O_RDONLY);
    if (fd < 0) {
        perror("Open failed");
        return;
    }

    while (read(fd, &s, sizeof(Student)) > 0) {
        if (s.roll == roll) {
            printf("Record Found: %d %s %.2f\n", s.roll, s.name, s.marks);
            found = 1;
            break;
        }
    }

    if (!found) printf("Record not found.\n");
    close(fd);
}

void updateRecord() {
    Student s;
    int roll, found = 0;

    printf("Enter Roll No to update: ");
    scanf("%d", &roll);

    int fd = open(FILENAME, O_RDWR);
    if (fd < 0) {
        perror("Open failed");
        return;
    }

    while (read(fd, &s, sizeof(Student)) > 0) {
        if (s.roll == roll) {
            printf("Enter New Name: ");
            scanf("%s", s.name);
            printf("Enter New Marks: ");
            scanf("%f", &s.marks);

            lseek(fd, -sizeof(Student), SEEK_CUR);
            write(fd, &s, sizeof(Student));
            printf("Record updated.\n");
            found = 1;
            break;
        }
    }

    if (!found) printf("Record not found.\n");
    close(fd);
}

void deleteRecord() {
    Student s;
    int roll;

    printf("Enter Roll No to delete: ");
    scanf("%d", &roll);

    int fd1 = open(FILENAME, O_RDONLY);
    int fd2 = open("temp.txt", O_CREAT | O_WRONLY | O_TRUNC, 0644);

    if (fd1 < 0 || fd2 < 0) {
        perror("File open failed");
        return;
    }

    int found = 0;
    while (read(fd1, &s, sizeof(Student)) > 0) {
        if (s.roll != roll) {
            write(fd2, &s, sizeof(Student));
        } else {
            found = 1;
        }
    }

    close(fd1);
    close(fd2);

    remove(FILENAME);
    rename("temp.txt", FILENAME);

    if (found)
        printf("Record deleted.\n");
    else
        printf("Record not found.\n");
}

int main() {
    int choice;

    do {
        printf("\n====== Student Database Menu ======\n");
        printf("1. Create Database File\n");
        printf("2. View All Records\n");
        printf("3. Insert New Record\n");
        printf("4. Delete a Record\n");
        printf("5. Update a Record\n");
        printf("6. Search for a Record\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: createFile(); break;
            case 2: viewRecords(); break;
            case 3: insertRecord(); break;
            case 4: deleteRecord(); break;
            case 5: updateRecord(); break;
            case 6: searchRecord(); break;
            case 7: printf("Exiting...\n"); break;
            default: printf("Invalid choice.\n");
        }

    } while (choice != 7);

    return 0;
}




gcc student_db.c -o student_db
./student_db
