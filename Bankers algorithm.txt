Bankers algorithm

// Filename: bankers.c
#include <stdio.h>

int main() {
    int n, m, i, j, k;
    int alloc[10][10], max[10][10], avail[10];
    int need[10][10], finish[10], safeSeq[10];
    int count = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter number of resources: ");
    scanf("%d", &m);

    printf("Enter Allocation Matrix:\n");
    for (i = 0; i < n; i++) {
        printf("P[%d]: ", i);
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);
    }

    printf("Enter Maximum Matrix:\n");
    for (i = 0; i < n; i++) {
        printf("P[%d]: ", i);
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);
    }

    printf("Enter Available Resources:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &avail[i]);

    // Calculate need matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    // Initialize finish array
    for (i = 0; i < n; i++)
        finish[i] = 0;

    // Banker's Algorithm
    while (count < n) {
        int found = 0;
        for (i = 0; i < n; i++) {
            if (!finish[i]) {
                int can_allocate = 1;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        can_allocate = 0;
                        break;
                    }
                }

                if (can_allocate) {
                    for (k = 0; k < m; k++)
                        avail[k] += alloc[i][k];

                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }

        if (!found) {
            printf("\nSystem is in an UNSAFE state. Deadlock possible.\n");
            return 0;
        }
    }

    // Print Safe Sequence
    printf("\nSystem is in a SAFE state.\nSafe sequence is: ");
    for (i = 0; i < n; i++)
        printf("P[%d] ", safeSeq[i]);
    printf("\n");

    return 0;
}





SAMPLE INPUT:
Enter number of processes: 5
Enter number of resources: 3

Enter Allocation Matrix:
P[0]: 0 1 0
P[1]: 2 0 0
P[2]: 3 0 2
P[3]: 2 1 1
P[4]: 0 0 2

Enter Maximum Matrix:
P[0]: 7 5 3
P[1]: 3 2 2
P[2]: 9 0 2
P[3]: 2 2 2
P[4]: 4 3 3

Enter Available Resources:
3 3 2




System is in a SAFE state.
Safe sequence is: P[1] P[3] P[4] P[0] P[2]

gcc bankers.c -o bankers
./bankers
